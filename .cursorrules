# コードスタイルと構造

- 簡潔で技術的な TypeScript コードを正確な例とともに記述する
- 関数型と宣言型のプログラミングパターンを使用し、クラスは避ける
- コードの重複よりも反復処理とモジュール化を優先する
- 説明的な変数名を補助動詞とともに使用する（例：isLoading, hasError）

# ファイル構造

- エクスポートされたコンポーネント
- サブコンポーネント
- ヘルパー
- 静的コンテンツ
- 型

# データアクセス

- サーバーコンポーネントでデータフェッチ等を行う場合は、なるべく可読性をあげるためにDALに分けて関数は作成してください
  - 例: `/app/lib/api/*.ts`

# 命名規則

- ディレクトリには小文字とダッシュを使用する（例：components/auth-wizard）
- コンポーネントには名前付きエクスポートを推奨

# TypeScript の使用

- すべてのコードに TypeScript を使用し、型よりインターフェースを優先する
- 列挙型（enum）を避け、代わりにマップを使用する
- TypeScript インターフェースを持つ関数コンポーネントを使用する

# 構文とフォーマット

- 純粋な関数には「function」キーワードを使用する
- 条件文における不必要な中括弧を避け、シンプルなステートメントには簡潔な構文を使用する
- 宣言的な JSX を使用する

# UI とスタイリング

- コンポーネントとスタイリングには Shadcn UI、Radix、Tailwind を使用する
- Tailwind CSS でレスポンシブデザインを実装し、デスクトップファーストのアプローチを採用する
- ランディングページはモバイルファースト、SEO 重視
- ユーザーポータルはデスクトップファーストを採用

# パフォーマンス最適化

- 'use client'、'useEffect'、'setState' の使用を最小限に抑え、React Server Components (RSC) を優先する
- クライアントコンポーネントを Suspense でラップし、フォールバックを提供する
- 重要でないコンポーネントには動的ローディングを使用する
- 画像の最適化：
  - WebP フォーマットの使用
  - サイズデータの包含
  - 遅延読み込みの実装

# 主要な規約

- URL 検索パラメータの状態管理には 'nuqs' を使用する
- Web Vitals（LCP、CLS、FID）を最適化する
- 'use client' の使用を制限する：
  - サーバーコンポーネントと Next.js SSR を優先する
  - 小さなコンポーネントの Web API アクセスにのみ使用する
  - データの取得や状態管理には使用しない

